@charset "UTF-8";
// main.scss, for defining common properties.

/*!
 * Iamprabhat®
 * Version    : v0.0.1
 * Build      : Everest
 * Mode       : -//-Production-//-
 * -------------------------------------------------------------------
 * @require   : Sass + Compass
 * @require   : Ruby + Node.js® + Grunt
 * Designed and Build with ♥ for prabhatkumar.org/.
 * -------------------------------------------------------------------
 * @architecture    : Prabhat Kumar, http://prabhatkumar.org/
 * @author          : Prabhat Kumar, https://github.com/iamprabhat
 * -------------------------------------------------------------------
 * Copyright © 2014 - 2016 Prabhat Kumar, All Rights Reserved.
 * Licensed under Apache.
 * -------------------------------------------------------------------
 */

// AXIX® [v0.0.1], Configurations.
// 1. Typography ==//==
$axix-base-font-family:  quote("Helvetica Neue"), Helvetica, Arial, sans-serif !default;
$axix-base-font-family-sans-serif:              quote("Open Sans"), sans-serif !default;
// 1.0 Base Font Size
$axix-base-font-size:                                                  0.875em !default; // 14px
// 1.1 Heading: <h1> to <h2>
$axix-base-font-size-h1:                 floor(($axix-base-font-size * 1.645)) !default;
$axix-base-font-size-h2:                 floor(($axix-base-font-size * 1.308)) !default;
// 1.2 Line Height
$axix-base-line-height:                                            1.428571429 !default; // [20/14]
$axix-line-height-computed: floor(($axix-base-font-size * $axix-base-line-height)) !default; // ~20px

// 2. Colors ==//==
$axix-brand-base-color-hex:                                            #F15E4A !default;
$axix-brand-base-color-rgb:                                     rgb(241,94,74) !default;
$axix-base-white-color-hex:                                            #FFFFFF !default;
$axix-base-white-color-rgb:                                   rgb(255,255,255) !default;

// 3. Components ==//==
$axix-display-blocktype:                                                 block !default;
$axix-display-inlinetype:                                         inline-block !default;
$axix-position-abs:                                                   absolute !default;
$axix-position-rel:                                                   relative !default;

// 4. for Height and Width ==//==
$axix-val-hundred:                                                        100% !default;
$axix-val-eighty:                                                          80% !default;

// ==========================================
// A. The @mixin directive for normalize.css
// ==========================================
// @version: [v3.0.3]
// @author : Prabhat Kumar
/// Loads: custom - normalize.css
/// @access private
/// redefined normalize.css
@mixin -axix-normalize {
  /*! Iamprabhat® [v0.0.1] */
  /*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
  
  //
  // 1. Set default font family to sans-serif.
  // 2. Prevent iOS and IE text size adjust after device orientation change,
  //    without disabling user zoom.
  //
  html {
    font-family: sans-serif; // 1
    -ms-text-size-adjust: 100%; // 2
    -webkit-text-size-adjust: 100%; // 2
  }
  
  //
  // Remove default margin.
  //
  body {
    margin: 0;
  }
  
  // HTML5 display definitions
  // ==========================================================================
  //
  // Correct `block` display not defined for any HTML5 element in IE 8/9.
  //
  article,
  figure,
  figcaption,
  footer,
  header,
  hgroup,
  section {
    display: block;
  }
  
  // Links
  // ==========================================================================
  //
  // Remove the gray background color from active links in IE 10.
  //
  a {
    background-color: transparent;
  }
  
  //
  // Improve readability of focused elements when they are also in an
  // active/hover state.
  //
  a:active,
  a:hover {
    outline: 0;
  }
  
  // Text-level semantics
  // ==========================================================================
  //
  // Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
  //
  b,
  strong {
    font-weight: bold;
  }
  
  //
  // Address variable `h1` font-size and margin within `section` and `article`
  // contexts in Firefox 4+, Safari, and Chrome.
  //
  h1 {
    font-size: 2em;
    margin: 0.67em 0;
  }
  
  //
  // Address inconsistent and variable font size in all browsers.
  //
  small {
    font-size: 80%;
  }
  
  //
  // Prevent `sub` and `sup` affecting `line-height` in all browsers.
  //
  sub,
  sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  
  sub {
    bottom: -0.25em;
  }
  
  sup {
    top: -0.5em;
  }
  
  // Embedded content
  // ==========================================================================
  //
  // Correct overflow not hidden in IE 9/10/11.
  //
  svg:not(:root) {
    overflow: hidden;
  }
  
  // Grouping content
  // ==========================================================================
  //
  // Address margin not present in IE 8/9 and Safari.
  //
  figure {
    margin: 1em 40px;
  }
  
  //
  // Address differences between Firefox and other browsers.
  //
  hr {
    box-sizing: content-box;
    height: 0;
  }
}

// ==========================================
// B. The @mixin directive for Clearfix
// ==========================================
// For modern browsers:
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// ==========================================
// C. The @mixin directive for Box sizing
// ==========================================
// The box-sizing property is used to alter the default CSS box model used to calculate widths and heights of elements.
// Values: content-box || border-box || inherit || initial || unset

@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// ==========================================
// D. The @mixin directive for User select
// ==========================================
// For selection options for text on the page
// Controls the actual Selection operation.
// Note: This doesn't have any effect on content loaded as chrome, except in textboxes.
// Values: none || text || all and -moz-none or element for Firefox 21 and -ms-, respectively.

@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select; // IE10+
          user-select: $select;
}

// ==========================================
// E. The @mixin directive for ::selection
// ==========================================
// The ::selection CSS pseudo-element applies rules to the portion of a document,
// that has been highlighted (e.g. selected with the mouse or another pointing device) by the user.
/// Note: Only a small subset of CSS properties can be used in a rule using ::selection in it's
/// selector: color, background-color, cursor, outline, text-decoration, text-emphasis-color and text-shadow.
@mixin axix-selection ($background, $color) {
  background: $background;
  color: $color;
}

// ==========================================
// F. The @mixin directive for Size (W & H)
// ==========================================

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// Setting to `true` to enable antialiased type,
// using the `-webkit-font-smoothing` and `-moz-osx-font-smoothing` CSS properties.
/// @type Boolean
$axix-body-antialiased: true !default;

// ==========================================
// G. The @mixin directive for AXIX Globals.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ==========================================
@mixin axix-base-global-settings {
  // 0. normalize reset css.
  // @using: @include directive for custom - normalize.
  @include -axix-normalize;
  
  // 1. Universal Selector
  // ----------------------
  // An asterisk (*) is the universal selector for CSS.
  // It matches a single element of any type.
  /// Note: Omitting the asterisk with simple selectors has the same effect.
  /// Set box-sizing globally to handle padding and border widths.
  /// ----------------------------------------------------------------------
  *,
  *:before,
  *:after {
    // @using: @include directive for box-sizing.
    @include box-sizing(border-box);
    margin: 0;
    padding: 0;
  }
  
  // 2. ::selection
  // --------------
  ::-moz-selection {
    // @using: @include directive for ::selection.
    @include axix-selection(#4B3832, #BE9B7B);
  }
  ::selection {
    // @using: @include directive for ::selection.
    @include axix-selection(#4B3832, #BE9B7B);
  }
  
  // 3. Root element
  // ---------------
  html {
    font-size: 10px;
    // @using: @include directive for size (W & H) and box-sizing.
    @include size(100%);
    @include box-sizing(inherit);
    // Note: -webkit-tap-highlight-color is a non-standard CSS property that sets the color of the highlight,
    // that appears over a link while it's being tapped to indicate to the user,
    /// (1) that their tap is being successfully recognized, and
    /// (2) which element they're tapping on.
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    /* for some Androids */
    -webkit-tap-highlight-color: transparent;
  }
  
  // 4. Default body style(s).
  // -------------------------
  body {
    background-color: $axix-base-white-color-rgb;
    color: #4C4C4C;
    font-family: $axix-base-font-family;
    font-size: $axix-base-font-size;
    font-style: normal;
    font-weight: 100;
    line-height: $axix-base-line-height;
    margin: 0;
    padding: 0;
    // @using: @include directive for size (W & H).
    @include size(100%);
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    // Note: Now, add below `JavaScript` to allow :active styles to work in our CSS on a page in Mobile Safari:
    // document.addEventListener("touchstart", function(){}, true);
    /* for some Androids */
    -webkit-tap-highlight-color: transparent;
    // for effective typography.
    @if ($axix-body-antialiased) {
      /// @param {@value} - none | subpixel-antialiased | antialiased
      -webkit-font-smoothing: antialiased;
      /// only for Mac O/S.
      -moz-osx-font-smoothing: grayscale;
    }
  }
  
  // 5. Image properties.
  // --------------------
  img {
    // Get rid of gap under images by making them display: inline-block; by default.
    display: $axix-display-inlinetype;
    display: -moz-inline-stack;
    // Grid defaults to get images and embeds to work properly.
    height: auto;
    width: auto;
    max-width: $axix-val-hundred;
    // for IE.
    -ms-interpolation-mode: bicubic;
    vertical-align: middle;
  }
}

// ==========================================
// H. Visually hide an element.
// ==========================================

%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// ==========================================
// I. CSS3 calc mixin.
// ==========================================

@mixin axix-calc($property, $value) {
  #{$property}: -webkit-calc(#{$value});
  #{$property}: -moz-calc(#{$value});
  #{$property}: calc(#{$value});
}

// ==========================================
// J. The @mixin directive for IE-7.
// ==========================================
// @Using: @content directive.

@mixin apply-to-ie7 {
  // IE7 hack from:-
  // http://www.paulirish.com/2009/browser-specific-css-hacks/
  *:first-child+html & {
    @content;
  }
}

// ==========================================
// K. Mixin helper to output vendor prefixes.
// ==========================================
// @param {String} $property - Unprefixed CSS property
// @param {*} $value - Raw CSS value
// @param {List} $prefixes - List of prefixes to output

@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}

// ==========================================
// L. The @function directive to strip unit.
// ==========================================

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// ==========================================
// M. The @function directive for px to em string interpolation.
// ==========================================
// @using Sass unitless() method.

$browser-context: 16;

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  
  @return $pixels / $context * 1em;
}

// ==========================================
// N. The @mixin directive for Animations.
// ==========================================
// The animation CSS property makes possible to animate transitions from one CSS style configuration to another.
// Properties Value:-
// A-1. animation - a shorthand property for below - "all".
// A-2. animation-name
// A-3. animation-duration
// A-4. animation-timing-function
// A-5. animation-delay
// A-6. animation-iteration-count
// A-7. animation-direction
// A-8. animation-fill-mode
// A-9. animation-play-state

// A-1.
@mixin animation($animation) {
  -webkit-animation: $animation;
     -moz-animation: $animation;
      -ms-animation: $animation;
       -o-animation: $animation;
          animation: $animation;
}
// A-2.
@mixin animation-name($name) {
  -webkit-animation-name: $name;
     -moz-animation-name: $name;
      -ms-animation-name: $name;
       -o-animation-name: $name;
          animation-name: $name;
}
// A-3.
@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
     -moz-animation-duration: $duration;
      -ms-animation-duration: $duration;
       -o-animation-duration: $duration;
          animation-duration: $duration;
}
// A-4.
@mixin animation-timing-function($timing-function) {
  -webkit-animation-timing-function: $timing-function;
     -moz-animation-timing-function: $timing-function;
      -ms-animation-timing-function: $timing-function;
       -o-animation-timing-function: $timing-function;
          animation-timing-function: $timing-function;
}
// A-5.
@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
     -moz-animation-delay: $delay;
      -ms-animation-delay: $delay;
       -o-animation-delay: $delay;
          animation-delay: $delay;
}
// A-6.
@mixin animation-iteration-count($iteration-count) {
  -webkit-animation-iteration-count: $iteration-count;
     -moz-animation-iteration-count: $iteration-count;
      -ms-animation-iteration-count: $iteration-count;
       -o-animation-iteration-count: $iteration-count;
          animation-iteration-count: $iteration-count;
}
// A-7.
@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
     -moz-animation-direction: $direction;
      -ms-animation-direction: $direction;
       -o-animation-direction: $direction;
          animation-direction: $direction;
}
// A-8.
@mixin animation-fill-mode($fill-mode) {
  -webkit-animation-fill-mode: $fill-mode;
     -moz-animation-fill-mode: $fill-mode;
      -ms-animation-fill-mode: $fill-mode;
       -o-animation-fill-mode: $fill-mode;
          animation-fill-mode: $fill-mode;
}
// A-9. values: running || paused
